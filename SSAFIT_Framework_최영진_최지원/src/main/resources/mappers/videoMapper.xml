<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafit.video.model.dao.VideoDao">

	<!-- 전체글 조회 -->
	<select id="selectAll" resultType="Video">
		SELECT videoId, title, url, fitpart, youtuber, viewCnt, date_format(regDate, '%Y-%m-%d') as regDate 
		FROM video;
	</select>
	
	<!-- 검색기능  -->
	<select id="search" resultType="Video" parameterType="SearchCondition">
		SELECT videoId, title, url, fitpart, youtuber, viewCnt, date_format(regDate, '%Y-%m-%d') as regDate
		FROM video
		<!-- 검색 조건 (동적쿼리)-->
		<where>
    		<if test="key != 'none' and fitpart != 'all'">
         		${key} LIKE concat('%', #{word}, '%') AND fitpart = #{fitpart}
    		</if>
    		<if test="key != 'none'">
         		${key} LIKE concat('%', #{word}, '%')
    		</if>
    		<if test="fitpart != 'all'">
        		fitpart = #{fitpart}
    		</if>
  		</where>
		<!-- 어떤 기준으로 어떤 방향으로 정렬 -->
		<if test="orderBy != 'none'">
			ORDER BY ${orderBy} ${orderByDir}
		</if>
	</select>

	<!-- 상세글 조회 -->
	<select id="selectOne" resultType="Video" parameterType="int">
		SELECT videoId, title, url, fitpart, youtuber, viewCnt, date_format(regDate, '%Y-%m-%d') as regDate
		FROM video
		WHERE videoId = #{videoId};
	</select>

	<!-- 조회수 증가 -->
	<update id="updateViewCnt" parameterType="int">
		UPDATE video
		SET viewCnt = viewCnt+1
		WHERE videoId = #{videoId}
	</update>
	
	<!-- url 기준 검색 -->
	<select id="selectUrl" resultType="Video" parameterType="String">
		select * from video
		where url = #{url};
	</select>
	
	<!-- 영상 저장 -->
	<insert id="insertVideo" parameterType="Video">
		insert into video(title, fitpart, youtuber, url, regDate)
		values (#{title}, #{fitpart}, #{youtuber}, #{url}, STR_TO_DATE(#{regDate}, '%Y-%m-%dT%H:%i:%sZ'));
	</insert>
	
	<!-- 난이도 별 영상 조회 -->
	<select id="selectLevelVideo" parameterType="int" resultType="Video">
		select v.videoId, v.title, v.url, v.fitpart, v.youtuber, v.viewCnt, date_format(v.regDate, '%Y-%m-%d') as regDate, v.level, count(r.reviewId) as reviewCount
		from video v left outer join review r on v.videoId = r.videoId
		where level = #{level}
		group by v.videoId;
	</select>
	
	<select id="selectLevelAll" resultType="Video">
		select v.videoId, v.title, v.url, v.fitpart, v.youtuber, v.viewCnt, date_format(v.regDate, '%Y-%m-%d') as regDate, v.level, count(r.reviewId) as reviewCount
		from video v left outer join review r on v.videoId = r.videoId
		group by v.videoId;
	</select>

</mapper>